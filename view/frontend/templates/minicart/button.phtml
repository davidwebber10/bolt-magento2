<?php
var_dump(get_class($block));
?>
<?php
/**
 * Bolt magento2 plugin
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @category   Bolt
 * @package    Bolt_Boltpay
 * @copyright  Copyright (c) 2018 Bolt Financial, Inc (https://www.bolt.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 * Replace js template
 * Puts / replaces the checkout buttons according to defined selectors.
 * Maintains Bolt checkout functionality.
 *
 * @var $block \Bolt\Boltpay\Block\Js
 */

if (!$block->isEnabled()) return;
?>

<div class="bolt-checkout-button with-cards">Bolt Button</div>

<script type="text/javascript">

    // Store the configuration parameters passed from the php block
    // in the global object. Used in this file and on the payment page
    // in payment method renderer, vendor/boltpay/bolt-magento2/view/frontend/web/js/view/payment/method-renderer/boltpay.js
    window.boltConfig = <?php echo $block->getSettings(); ?>;

    ///////////////////////
    // String.trim Polyfill
    ///////////////////////
    if (!String.prototype.trim) {
        String.prototype.trim = function () {
            return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
        };
    }
    ///////////////////////

    ////////////////////////////////////////////////////
    // DI: Inserting required Magento objects
    // the code below is dependant on.
    ////////////////////////////////////////////////////
    require([
        'jquery',
        'Magento_Customer/js/model/authentication-popup',
        'Magento_Customer/js/customer-data',
        'mage/validation/validation'
    ], function ($, authenticationPopup, customerData) {
        ////////////////////////////////////////////////////

        /**
         * Pure javascript ajax POST request function
         *
         * param string     url                 The request url
         * param array      params              The URL query string parameters
         * param callable   callback            The callback function to pass the response data to
         *
         * return XMLHttpRequest|ActiveXObject('Microsoft.XMLHTTP')
         */
        var ajaxPost = function(url, params, onSuccess, onError, async, headers) {
            var xhr;
            if (typeof async === 'undefined') async = true;
            if (typeof headers === 'undefined') {
                headers = {'Content-Type': 'application/x-www-form-urlencoded'};
            }
            xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
            if (typeof onSuccess === 'function') {
                xhr.onload = function () {
                    var result;
                    if (xhr.responseType === 'json') {
                        result = xhr.response;
                    } else {
                        result = JSON.parse(xhr.responseText);
                    }
                    onSuccess(result);
                };
            }
            if (typeof onError === 'function') {
                xhr.onerror = onError;
            }
            xhr.open('POST', url, async);
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            for (var header in headers) {
                if (headers.hasOwnProperty(header)) {
                    xhr.setRequestHeader(header, headers[header]);
                }
            }
            console.log('### AjaxPost ###');
            console.log(params);
            xhr.send(params);
            return xhr;
        };

        /**
         * Get the current page checkout type.
         * This function should be extended for Magento checkout extensions.
         *
         * return string
         */
        var getCheckoutType = function() {
            return trim(location.pathname, '/') === 'checkout' && (settings.quote_is_virtual || location.hash === '#payment') ? 'payment' : 'checkout';
        };

        /**
         * Get the checkout key according to the checkout type.
         *
         * return string
         */
        var getCheckoutKey = function () {
            var key = 'publishable_key_' + getCheckoutType();
            return settings[key];
        };

        /**
         * Apply function to every element with the specified selector.
         *
         * param selector   elements CSS selector
         * param fn         function to apply
         *
         * return void
         */
        var selectorApply = function(selector, fn){
            var elements = document.querySelectorAll(selector);
            for (var i = 0, length = elements.length; i < length; i++) {
                var element = elements[i];
                fn.call(element, element);
            }
        };

        /**
         * Apply function to every bolt checkout button.
         *
         * param fn         function to apply
         *
         * return void
         */
        var checkoutButtonApply = function(fn) {
            selectorApply(bolt_button_selector, fn);
        };

        /**
         * Toggle checkout button multi-step class, `bolt-multi-step-checkout`, according to the checkout type.
         *
         * return void
         */
        var setCheckoutTypeStyle = function() {
            var checkout_type = getCheckoutType();
            checkoutButtonApply(function(button) {
                if (checkout_type === 'payment') {
                    button.classList.remove(multi_step_css_class);
                } else {
                    button.classList.add(multi_step_css_class);
                }
            });
        };

        /**
         * Inject connect.js
         * return void
         */
        var insertConnectScript = function() {
            var scriptTag = document.getElementById('bolt-connect');
            var publishableKey = getCheckoutKey();
            if (scriptTag) {
                scriptTag.setAttribute('data-publishable-key', publishableKey);
                createOrder();
                return;
            }
            scriptTag = document.createElement('script');
            scriptTag.setAttribute('type', 'text/javascript');
            scriptTag.setAttribute('async', '');
            scriptTag.setAttribute('src', settings.connect_url);
            scriptTag.setAttribute('id', 'bolt-connect');
            scriptTag.setAttribute('data-publishable-key', publishableKey);
            scriptTag.onload = createOrder;
            document.head.appendChild(scriptTag);
        };

        /**
         * Set checkout button CSS and load connect.js
         * return void
         */
        var processButtons = function () {
            if (getCheckoutKey() !== '') {
                setCheckoutTypeStyle();
                insertConnectScript();
            }
        };

        // The configuration parameters passed from the php block
        var settings = window.boltConfig;
        // TODO: make `with-cards` option backend configurable
        var bolt_button_css_class    = 'bolt-checkout-button with-cards';
        var bolt_button_selector     = '.bolt-checkout-button';
        var multi_step_css_class     = 'bolt-multi-step-checkout';
        var billing_address_selector = '#bolt-billing-address';
        var place_order_payload_id   = 'bolt-place-order-payload';
        var bolt_clickable_selector  = '.bolt-checkout-button-button';
        var customer_email_selector  = '#customer-email';

        // On multiple checkout open/close actions the success event remains registered
        // resulting in making the success call multiple times. This variable stores
        // the last request to be aborted before new one is sent.
        var save_request;

        ////////////////////////////////////
        // BoltCheckout.configure parameters
        ////////////////////////////////////
        var cart = {orderToken:''};

        var hints = {prefill:{}};

        var callbacks = {

            close: function () {
                // redirect on succes order save
                if (callbacks.success_url) location.href = callbacks.success_url;
            },

            success: function (transaction, callback) {
                // abort previously sent save order request.
                if (save_request) save_request.abort();
                // get thr transaction reference
                var parameters = 'reference='+transaction.reference;
                // update order ajax request callback
                // sets the success order page redirect url from received data
                // and calls the final Bolt defined callback
                var onSuccess = function(data){

                    // show alert message on error
                    if (data.status !== 'success') {
                        if (data.message) {
                            console.log(data.message);
                            alert(data.message);
                        }
                        return false;
                    }

                    <?php echo $block->getjavascriptSuccess(); ?>
                    callbacks.success_url = data.success_url;
                    callback();
                };
                // ajax call to the update order transaction data endpoint.
                // passes the bolt transaction reference
                save_request = ajaxPost(settings.save_order_url, parameters, onSuccess);
            },

            check: function () {

                if (createRequest || !cart.orderToken) {
                    console.log("Retrieving order token from server... not ready to checkout yet.");
                    return false;
                }

                /**
                 * On Bolt button click check if guest checkout is allowed.
                 * Display login popup to guest customers if it is not. The
                 * Magento customerData and authenticationPopup objects are
                 * used.
                 */
                var customer = customerData.get('customer');
                var shoppingCart = customerData.get('cart');
                if (!customer().firstname && shoppingCart().isGuestCheckoutAllowed === false) {
                    authenticationPopup.showModal();
                    return false;
                }

                return true;
            },

            onEmailEnter: function(email) {
                if (callbacks.email !== email) {
                    ajaxPost(settings.save_email_url, 'email='+encodeURIComponent(email));
                    callbacks.email = email;
                }
            }
        };
        ////////////////////////////////////

        /////////////////////////////////////////////////////
        // Create Bolt order and configure BoltCheckout
        /////////////////////////////////////////////////////
        var createRequest;
        var createOrder = function () {
            if (createRequest) createRequest.abort();
            // define the params sent with the request variable
            var params = [];

            // check and set payment_only flag
            if (getCheckoutType() === 'payment') {

                // stop if customer email field is present and invalid
                var customer_email = $(customer_email_selector);
                var form = customer_email.closest('form');
                if (typeof customer_email.val() !== 'undefined'
                    && (customer_email.val().trim() === ''
                        || (form.validation() && form.validation('isValid') === false)
                    )) return;

                if (settings && !!settings.publishable_key_payment) {
                    params.push('payment_only=true');
                } else {
                    return;
                }

                // get additional page data to be sent with the request,
                // one page checkout billing info, email, ...
                var place_order_payload = document.getElementById(place_order_payload_id);
                if (place_order_payload && place_order_payload.value) {

                    // stop if customer billing address is not set
                    if ($(billing_address_selector).val() === 'null') return;

                    // decode payload json string
                    var place_order_payload_obj = JSON.parse(place_order_payload.value);

                    // delete redundant title property
                    if (place_order_payload_obj.paymentMethod) {
                        delete place_order_payload_obj.paymentMethod.title;
                    }

                    // update payload email, use the value from the page
                    if (customer_email.val()) {
                        place_order_payload_obj.email = customer_email.val();
                    }
                    place_order_payload.value = JSON.stringify(place_order_payload_obj);

                    params.push('place_order_payload=' + place_order_payload.value);
                }
            }
            params = params.join('&');
            if (params === '') params = null;
            // set cart and hints data in a response callback
            var onSuccess = function(data){
                cart = data.cart;
                createRequest = null;

                var prefill = isObject(data.hints.prefill) ? deepMergeObjects(hints.prefill, data.hints.prefill) : hints.prefill;
                hints = deepMergeObjects(hints, data.hints);
                hints.prefill = prefill;

                hints.publishableKey = getCheckoutKey();

                if (window.BoltCheckout) BoltCheckout.configure(cart, hints, callbacks);

                // prefetch Shipping and Tax for multi-step checkout
                if (getCheckoutType() === 'checkout') prefetchShipping();
            };
            var onError = function(error) {
                createRequest = null;
            };
            // send create order request
            createRequest = ajaxPost(settings.create_order_url, params, onSuccess, onError);
        };
        /////////////////////////////////////////////////////
    });

    <?php echo $block->getAdditionalJavascript(); ?>
</script>

<style>
    <?php echo $block->getGlobalCSS(); ?>
</style>

