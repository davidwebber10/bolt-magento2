<?php
/**
 * Copyright Â© 2013-2017 Bolt, Inc. All rights reserved.
 * See COPYING.txt for license details.
 *
 * Replace js template
 * Puts / replaces the checkout buttons according to defined selectors.
 * Maintains Bolt checkout functionality.
 *
 * @var $block \Bolt\Boltpay\Block\Js
 */
if (!$block->isEnabled()) return;
?>
<?php $success = $block->getJavascriptSuccess(); ?>

<script type="text/javascript">

// Store the configuration parameters passed from the php block
// in the global object. Used in this file and on the payment page
// in payment method renderer, vendor/boltpay/bolt-magento2/view/frontend/web/js/view/payment/method-renderer/boltpay.js
window.boltConfig = <?php echo $block->getSettings(); ?>;

! function() {

    ///////////////////////
    // String.trim Polyfill
    ///////////////////////
    if (!String.prototype.trim) {
        String.prototype.trim = function () {
            return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
        };
    }
    ///////////////////////

    /////////////////////////////////////////////////////////////////////////
    // Using Mutation Observers to Watch for Element Availability and change.
    /////////////////////////////////////////////////////////////////////////
    ! function(win) {

        let listeners = [],
            doc = win.document,
            MutationObserver = win.MutationObserver || win.WebKitMutationObserver,
            observer,
            attribute_listeners = [],
            attribute_observer,
            data_listeners = [],
            data_observer;

        function ready(selector, fn) {
            // Store the selector and callback to be monitored
            listeners.push({
                selector: selector,
                fn: fn
            });
            if (!observer) {
                // Watch for changes in the document
                observer = new MutationObserver(check);
                observer.observe(doc.documentElement, {
                    childList: true,
                    subtree: true
                });
            }
            // Check if the element is currently in the DOM
            check();
        }

        function check() {
            // Check the DOM for elements matching a stored selector
            for (let i = 0, len = listeners.length, listener, elements; i < len; i++) {
                listener = listeners[i];
                // Query for elements matching the specified selector
                elements = doc.querySelectorAll(listener.selector);
                for (let j = 0, jLen = elements.length, element; j < jLen; j++) {
                    element = elements[j];
                    // Make sure the callback isn't invoked with the
                    // same element more than once
                    if (!element.ready) {
                        element.ready = true;
                        // Invoke the callback with the element
                        listener.fn.call(element, element);
                    }
                }
            }
        }

        function attributes_change(selector, fn) {
            // Store the selector and callback to be monitored
            attribute_listeners.push({
                selector: selector,
                fn: fn
            });
            if (!attribute_observer) {
                // Watch for attribut changes in the document
                attribute_observer = new MutationObserver(check_attributes);
                let config = {
                    attributes: true,
                    subtree: true
                };
                attribute_observer.observe(doc.documentElement, config);
            }
        }

        function check_attributes() {
            // Check the DOM for elements matching a stored selector
            for (let i = 0, len = attribute_listeners.length, listener, elements; i < len; i++) {
                listener = attribute_listeners[i];
                // Query for elements matching the specified selector
                elements = doc.querySelectorAll(listener.selector);
                for (let j = 0, jLen = elements.length, element; j < jLen; j++) {
                    element = elements[j];
                    // Invoke the callback with the element
                    listener.fn.call(element, element);
                }
            }
        }

        function data_change(selector, fn) {
            // Store the selector and callback to be monitored
            data_listeners.push({
                selector: selector,
                fn: fn
            });
            if (!data_observer) {
                // Watch for data changes in the document
                data_observer = new MutationObserver(check_data);
                let config = {
                    characterData: true,
                    subtree: true
                };
                data_observer.observe(doc.documentElement, config);
            }
        }

        function check_data() {
            // Check the DOM for elements matching a stored selector
            for (let i = 0, len = data_listeners.length, listener, elements; i < len; i++) {
                listener = data_listeners[i];
                // Query for elements matching the specified selector
                elements = doc.querySelectorAll(listener.selector);
                for (let j = 0, jLen = elements.length, element; j < jLen; j++) {
                    element = elements[j];
                    // Invoke the callback with the element
                    listener.fn.call(element, element);
                }
            }
        }

        // Expose methods
        win.onElementReady     = ready;
        win.onAttributesChange = attributes_change;
        win.onDataChange       = data_change;

    }(window);
    ////////////////////////////////////////////////////////////////////////

    ////////////////////////////////
    // Merge objects
    ////////////////////////////////
    var isObject = function (item) {
        return (item && typeof item === 'object' && !Array.isArray(item));
    };

    var deepMergeObjects = function () {

        // Variables
        let extended = {},
            i = 0;

        // Merge the object into the extended object
        var merge = function (obj) {
            for (let prop in obj) {

                if (obj.hasOwnProperty(prop)) {
                    if (isObject(obj[prop])) {
                        // If the property is an object
                        extended[prop] = deepMergeObjects(extended[prop], obj[prop]);
                    } else {
                        // Otherwise, do a regular merge
                        extended[prop] = obj[prop];
                    }
                }
            }
        };

        // Loop through each object and conduct a merge
        for (; i < arguments.length; i++) {
            merge(arguments[i]);
        }

        return extended;
    };
    ////////////////////////////////

    /**
     * Pure javascript ajax POST request function
     *
     * param string     url                 The request url
     * param array      params              The URL query string parameters
     * param callable   callback            The callback function to pass the response data to
     *
     * return XMLHttpRequest|ActiveXObject('Microsoft.XMLHTTP')
     */
    var ajaxPost = function(url, params, onSuccess, onError, async, headers) {
        let xhr;
        if (typeof async === 'undefined') async = true;
        if (typeof headers === 'undefined') {
            headers = {'Content-Type': 'application/x-www-form-urlencoded'};
        }
        xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
        xhr.onload = function () {
            let result;

            if (xhr.responseType === 'json') {
                result = xhr.response;
            } else {
                result = JSON.parse(xhr.responseText);
            }
            onSuccess(result);
        };
        if (typeof onError === 'function') {
            xhr.onerror = onError;
        }
        xhr.open('POST', url, async);
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        for (let header in headers) {
            if (headers.hasOwnProperty(header)) {
                xhr.setRequestHeader(header, headers[header]);
            }
        }
        xhr.send(params);
        return xhr;
    };

    /**
     * Get the current page checkout type.
     * This function should be extended for Magento checkout extensions.
     *
     * return string
     */
    var getCheckoutType = function() {
        return 'payment';
    };

    /**
     * Get the checkout key according to the checkout type.
     *
     * return string
     */
    var getCheckoutKey = function () {
        let key = 'publishable_key_back_office';

        return settings[key];
    };

    /**
     * Apply function to every element with the specified selector.
     *
     * param selector   elements CSS selector
     * param fn         function to apply
     *
     * return void
     */
    var selectorApply = function(selector, fn){
        let elements = document.querySelectorAll(selector);
        for (let i = 0, length = elements.length; i < length; i++) {
            let element = elements[i];
            fn.call(element, element)
        }
    };

    /**
     * Apply function to every bolt checkout button.
     *
     * param fn         function to apply
     *
     * return void
     */
    var checkoutButtonApply = function(fn) {
        let elm = document.getElementById('payment_form_boltpay');
        if (elm.style.visibility = 'visible') {
            selectorApply(bolt_button_selector, fn);
        }
    };

    /**
     * Toggle checkout button multi-step class, `bolt-multi-step-checkout`, according to the checkout type.
     *
     * return void
     */
    var setCheckoutTypeStyle = function() {
        let checkout_type = getCheckoutType();
        checkoutButtonApply(function(button) {
            if (checkout_type === 'payment') {
                button.classList.remove(multi_step_css_class);
            } else {
                button.classList.add(multi_step_css_class);
            }
        });
    };

    /**
     * Inject connect.js
     * return void
     */
    var insertConnectScript = function() {
        let scriptTag = document.getElementById('bolt-connect'),
            publishableKey = getCheckoutKey();
        if (scriptTag) {
            scriptTag.setAttribute('data-publishable-key', publishableKey);
            createOrder();
            return;
        }
        scriptTag = document.createElement('script');
        scriptTag.setAttribute('type', 'text/javascript');
        scriptTag.setAttribute('async', '');
        scriptTag.setAttribute('src', settings.connect_url);
        scriptTag.setAttribute('id', 'bolt-connect');
        scriptTag.setAttribute('data-publishable-key', publishableKey);
        scriptTag.onload = createOrder;
        document.head.appendChild(scriptTag);
    };

    /**
     * Set checkout button CSS and load connect.js
     * return void
     */
    let processButtons = function () {
        if (getCheckoutKey() !== '') {
            setCheckoutTypeStyle();
            insertConnectScript();
        }
    };

    // The configuration parameters passed from the php block
    let settings = window.boltConfig,
    // TODO: make `with-cards` option backend configurable
        bolt_button_css_class    = 'bolt-checkout-button with-cards',
        bolt_button_selector     = '.bolt-checkout-button',
        multi_step_css_class     = 'bolt-multi-step-checkout',
        billing_address_selector = '#bolt-billing-address',
        place_order_payload_id   = 'bolt-place-order-payload';

    // On multiple checkout open/close actions the success event remains registered
    // resulting in making the success call multiple times. This variable stores
    // the last request to be aborted before new one is sent.
    let save_request;

    ////////////////////////////////////
    // BoltCheckout.configure parameters
    ////////////////////////////////////
    let cart = {};

    let hints = {prefill:{}};

    let callbacks = {

        close: function () {
            // redirect on success order save
            if (callbacks.success_url) location.href = callbacks.success_url;
        },

        success: function (transaction, callback) {
            // abort previously sent save order request.
            if (save_request) save_request.abort();
            // get thr transaction reference
            let parameters = 'reference='+transaction.reference;
            // update order ajax request callback
            // sets the success order page redirect url from received data
            // and calls the final Bolt defined callback
            let onSuccess = function(data){

                <?php echo $success; ?>

                callbacks.success_url = data.success_url;
                callback();
            };
            // ajax call to the update order transaction data endpoint.
            // passes the bolt transaction reference
            save_request = ajaxPost(settings.save_order_url, parameters, onSuccess);
        },

        // the Bolt order is created right after the checkout button is clicked
        // and the checkout modal popup is opened only if order creation was successfull
        check: function () {
            let errors = [],
                shippingMethodContainer = jQuery('#order-shipping_method'),
                infoShipmentMethod = shippingMethodContainer.find('.order-shipping-method-info dl.admin__order-shipment-methods dt')
            ;

            if (!cart.orderToken) {
                errors.push('Invalid Order Token');
            }

            if (!infoShipmentMethod.length) {
                errors.push('Please specify the "Shipping Method"!');
            }

            if (errors.length) {
                let errorMsg = errors.join(', ');

                console.error('BoltPay Check: ', errorMsg);
                alert(errorMsg);

                return false;
            }

            return true;
            // if orderToken is set the checkout window will open
            // return !!cart.orderToken;
        }
    };
    ////////////////////////////////////

    /////////////////////////////////////////////////////
    // Create Bolt order and configure BoltCheckout
    /////////////////////////////////////////////////////
    var create_request;
    let createOrder = function () {
        if (create_request) create_request.abort();
        // preset success condition to false
        cart.orderToken = '';
        // define the params sent with the request variable
        let params = [];

        params.push('payment_only=true');

        // get additional page data to be sent with the request,
        // one page checkout billing info, email, ...
        let place_order_payload = document.getElementById(place_order_payload_id);

        if (place_order_payload && place_order_payload.value) {
            params.push('place_order_payload=' + place_order_payload.value);
        }
        params = params.join('&');

        if (params === '') params = null;
        // set cart and hints data in a response callback
        let onSuccess = function(data){
            cart = data.cart;

            let prefill = isObject(data.hints.prefill) ? deepMergeObjects(hints.prefill, data.hints.prefill) : hints.prefill;
            hints = deepMergeObjects(hints, data.hints);
            hints.prefill = prefill;

            hints.publishableKey = getCheckoutKey();

            if (window.BoltCheckout) BoltCheckout.configure(cart, hints, callbacks);

        };
        // send create order request
        create_request = ajaxPost(settings.create_order_url, params, onSuccess);
    };
    /////////////////////////////////////////////////////

    /////////////////////////////////////////////////////
    // Toggle checkout button visibility on payment page
    // according to billing address edit state.
    // While editing the address the value of the hidden
    // element is "null" and checkout buttons are hidden.
    /////////////////////////////////////////////////////
    let billing_address_value;
    onAttributesChange(billing_address_selector, function(element) {
        let checkout_type = getCheckoutType();
        checkoutButtonApply(function(button) {
            if (checkout_type !== 'payment') return;

            if (element.value === 'null') {
                button.style.display = 'none';
            } else {
                button.style.display = '';
                if (element.value !== billing_address_value) {
                    billing_address_value = element.value;
                    createOrder();
                }
            }
        });
    });
    /////////////////////////////////////////////////////

    /////////////////////////////////////////////////////
    // Flag that is true if checkout buttons exists on the page
    let checkout_buttons = false;
    ////////////////////////////////////////////////
    // process the button when available on the page
    ////////////////////////////////////////////////
    onElementReady(bolt_button_selector, function(element) {
        checkout_buttons = true;
        processButtons();
    });
    ////////////////////////////////////////////////

    //////////////////////////////////////////////////////////
    // loop through selectors array and set up the replacement
    //////////////////////////////////////////////////////////
    for (let i = 0, length = settings.selectors.length; i < length; i++) {
        let selector = settings.selectors[i];
        ! function(selector) {
            let parts = selector.split('|'),
                // the CSS selector
                identifier = parts[0].trim(),
                // button placement regarding the selector element, prepend, append
                position =  parts[1];
            /////////////////////////////////////////////////////
            // replace the selectors with bolt button identifiers
            // if / when selectors are in the DOM
            /////////////////////////////////////////////////////
            onElementReady(identifier, function(element) {
                if (getCheckoutKey() === '') return;
                let bolt_button = document.createElement("div");

                bolt_button.setAttribute("class", bolt_button_css_class);
                // place the button before or after selector element
                if (position && position.trim().toLowerCase() === 'append') {
                    element.parentNode.insertBefore(bolt_button, element.nextSibling);
                } else {
                    element.parentNode.insertBefore(bolt_button, element);
                }
                // if no position is specified remove the selector element
                if (!position) {
                    element.parentNode.removeChild(element);
                }
            });
            /////////////////////////////////////////////////////
        }(selector);
    }
    //////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////
    // Reconfigure BoltCheckout with page collected hints data
    ///////////////////////////////////////////////////////////
    let old_hints;
    let configureHints = function() {

        // wait 3 seconds for the field(s) to be fully filled,
        // do not react on every keypress
        setTimeout(

            function() {
                let new_hints = JSON.stringify(hints);

                if (old_hints !== new_hints && window.BoltCheckout) {

                    BoltCheckout.configure(cart, hints, callbacks);
                    old_hints = new_hints;
                }
            },
            3000
        );
    };
    ///////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////
    // Run function fn on element attributes change
    ///////////////////////////////////////////////////////////
    let monitorAttributesChange = function(selectors, fn, on_ready, visible_only) {
        for (let i = 0, length = selectors.length; i < length; i++) {

            let selector = selectors[i];

            ! function(selector) {

                onElementReady(selector, function(el) {
                    if (on_ready) fn(el);
                    let value = el.value;
                    onAttributesChange(selector, function(element) {
                        if (visible_only && element.offsetParent === null) return;
                        if (element.value !== value) {
                            value = element.value;
                            fn(element);
                        }
                    });
                })

            }(selector);
        }
    };
    ///////////////////////////////////////////////////////////

    // Map from address input field names to hints.prefill keys
    let input_name_to_hints_prefill = {
        'order[billing_address][firstname]': 'firstname',
        'order[billing_address][lastname]': 'lastname',
        'order[account][email]': 'username',
        'order[billing_address][telephone]': 'telephone',
        'order[billing_address][street][0]': 'street[0]',
        'order[billing_address][street][1]': 'street[1]',
        'order[billing_address][city]': 'city',
        'order[billing_address][postcode]': 'postcode'
    };

    // CSS selectors of the hints prefill elements parents
    // used to distinct hints related fields from others with the same name
    let input_name_to_hints_prefill_prefixes = [
        '#order-billing_address_fields'
    ];

    /////////////////////////////////////////////////////////////////////
    // Monitor address text input fields and update hints on value change
    /////////////////////////////////////////////////////////////////////
    for (let i = 0, length = input_name_to_hints_prefill_prefixes.length; i < length; i++)
    {
        let prefix = input_name_to_hints_prefill_prefixes[i];

        ! function (prefix)
        {
            for (let input_name in input_name_to_hints_prefill) {
                if (input_name_to_hints_prefill.hasOwnProperty(input_name))
                {
                    ! function (input_name) {
                        let prefill_key = input_name_to_hints_prefill[input_name],
                            input_selectors = [prefix + ' input[name="' + input_name + '"]'];

                        monitorAttributesChange(input_selectors, function(element) {
                            hints.prefill[prefill_key] = element.value;
                            configureHints();
                        });
                    } (input_name);
                }
            }

        } (prefix);
    }
    /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////
    // Monitor Country DOM element change and update hints
    ///////////////////////////////////////////////////////////
    let country_selectors = ['select[name="order[billing_address][country_id]"]'];
    monitorAttributesChange(country_selectors, function(element) {
        if (!element.value) {
            delete hints.prefill.country;
        }
        else {
            hints.prefill.country = element.value;
        }
        delete hints.prefill.state;

        configureHints();
    }, true);
    ///////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////
    // Monitor State DOM element change and update hints
    ///////////////////////////////////////////////////////////
    let state_selectors = ['select[name="order[billing_address][region_id]"]'];
    monitorAttributesChange(state_selectors, function(element) {
        if (!element.value) {
            delete hints.prefill.state;
        }
        else {
            hints.prefill.state = element.options[element.selectedIndex].text;
        }

        configureHints();
    });
    ///////////////////////////////////////////////////////////
}();

</script>

<style>
    <?php echo $block->getGlobalCSS();?>
</style>
